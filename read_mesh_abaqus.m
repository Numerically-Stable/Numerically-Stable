% Extract mesh data (nodes and elements) from abaqus input file
% adapted from WANG JI version 
% https://github.com/whuwanji/readAbaqusInputFile

% Author: Pranjal Saxena, IIT Kanpur
% Email:  contactpranjal02@gmail.com
%
%
%%%%%%%%%%%%%%%% Usage %%%%%%%%%%%%%%%
% [node, element, bdy_node, bdy_elem] = 
% ps_read_mesh_abaqus(file_name_inp,mesh_correction_type)

%%%%%%%%%%%%%%%% Input %%%%%%%%%%%%%%%
% file_name_inp = 'example.inp'    (input file,should be in same directory)
% mesh_correction_type = 1         (0 for no bdy elements, 1 for bdy elems)

% mesh_correction = 1 means, re-creating mid nodes from corner nodes, 
% since ABAQUS generated mid nodes are not accurate enough, we update
% mid-nodes in quadratic elements. We dont change the curved edge/surface
% mid nodes.

%%%%%%%%%%%%%%% Output %%%%%%%%%%%%%%%
% node = array of node coordinates (ndof, dim)
% element = array of connectivity info (nel, node_per_elem)
% bdy_node = vector of boundary nodes (ndof_bdy,1)
% bdy_element = vector of boundary elements (nel_bdy,1)

% ndof = number of nodes in scalar problem
% dim = dimension of element (2 or 3)
% nel = number of elements
% node_per_elem = number of nodes in each element
% ndof_bdy = number of bdy nodes
% nel_bdy = number of bdy elements

%%%%%%%%%%%%%%%% Note %%%%%%%%%%%%%%%%
% (1.) Pay great attention to bdy elements and bdy nodes, sometimes it can
% happen that they are not able to form equal number of elements/nodes in
% last row, in such cases, edit .inp file by adding some random high values
% of nodes/elements (more than number of nodes/elements) for the code to be
% able to read all bdy nodes/elements and then it automatically eliminates
% extra nodes. Extra bdy elements never causes concern

% (2.) Currently supports mesh updation of linear and quadratic
% triangles/tetrahedrons, as only these simiplicial meshes are generated by
% ABAQUS

function [node, element, bdy_node, bdy_elem] = read_mesh_abaqus(file_name_inp,elemType,mesh_correction_type)
% read mesh input file
s   = fileread(file_name_inp);
% saves mesh data from .inp file from abaqus    
s   = lower(s);
q   = split(s, '*');
% read nodes
np  = arrayfun(@(i)strncmp(q{i},'node',4), 1:numel(q), 'uniform', 1);
ns  = q{np};
nsp = strfind(ns, newline);
ns  = ns(nsp(1)+1:nsp(end)-1);
nodes1 = str2num(ns);
% read elements
ep  = arrayfun(@(i)strncmp(q{i},'element',7), 1:numel(q), 'uniform', 1);
es  = q{ep};
esp = strfind(es, newline);
et  = es(1:esp(1)-1);

% get element type
n1    = strfind(et,'type=');
eType = et(n1(1)+5:end-1);
% elements
es  = es(esp(1)+1:esp(end)-1);
es  = strrep(es, char([44,13,10]), char(44));
elements1 = str2num(es);


% number of elements
nel = size(elements1,1);

% degree of freedom
noDofs = size(nodes1,1);

% initialising a copy of nodes which will be updated
nodes2 = nodes1 ;
bdy_node = [];
bdy_elem = [];

% mesh correction
switch elemType
case 'T3'
    % no correction needed, as there are no mid-nodes
    if mesh_correction_type==1
    else
        % read boundary data
        bp = arrayfun(@(i)strncmp(q{i},'elset',5), 1:numel(q), 'uniform', 1);
        bs = q{bp};
        bsp = strfind(bs,newline);
        bs = bs(bsp(1)+1:bsp(end)-1);
        bdy_elem = str2num(bs);
        bdy_elem = reshape(bdy_elem,[1,numel(bdy_elem)]);
        bnp = arrayfun(@(i)strncmp(q{i},'nset',4), 1:numel(q), 'uniform', 1);
        bns = q{bnp};
        bnsp = strfind(bns,newline);
        bns = bns(bnsp(1)+1:bnsp(end)-1);
        bdy_node2 = str2num(bns);
        bdy_node2 = reshape(bdy_node2,[1,numel(bdy_node2)]);
          
        % removing umwanted extra nodes added earlier
        a = 1 ;
        bdy_node = zeros(1,1) ;
        for i = 1:size(bdy_node2,2)
            if bdy_node2(1,i) <= noDofs
               bdy_node(1,a) = bdy_node2(1,i);
               a = a+1 ;
            end
        end
    end 

case 'T6'
    if mesh_correction_type==1
        % all mid nodes of all elements are updated
        for k = 1:nel
            nodes2(elements1(k,5),2:3) = (nodes1(elements1(k,2),2:3)+nodes1(elements1(k,3),2:3))/2;
            nodes2(elements1(k,6),2:3) = (nodes1(elements1(k,4),2:3)+nodes1(elements1(k,3),2:3))/2;
            nodes2(elements1(k,7),2:3) = (nodes1(elements1(k,2),2:3)+nodes1(elements1(k,4),2:3))/2;
        end
    else
        % read boundary data
        bp = arrayfun(@(i)strncmp(q{i},'elset',5), 1:numel(q), 'uniform', 1);
        bs = q{bp};
        bsp = strfind(bs,newline);
        bs = bs(bsp(1)+1:bsp(end)-1);
        bdy_elem = str2num(bs);
        bdy_elem = reshape(bdy_elem,[1,numel(bdy_elem)]);
        bnp = arrayfun(@(i)strncmp(q{i},'nset',4), 1:numel(q), 'uniform', 1);
        bns = q{bnp};
        bnsp = strfind(bns,newline);
        bns = bns(bnsp(1)+1:bnsp(end)-1);
        bdy_node2 = str2num(bns);
        bdy_node2 = reshape(bdy_node2,[1,numel(bdy_node2)]);
       
        % removing umwanted extra nodes added earlier
        a = 1 ;
        bdy_node = zeros(1,1) ;
        for i = 1:size(bdy_node2,2)
            if bdy_node2(1,i) <= noDofs
               bdy_node(1,a) = bdy_node2(1,i);
               a = a+1 ;
            end
        end
        % only mid nodes of internal elements are updated
        for k = 1:nel % Change the loop range as needed
            % Check if the current index is in vector bdy_elem
            if ~ismember(k, bdy_elem)                      
                nodes2(elements1(k,5),2:3) = (nodes1(elements1(k,2),2:3)+nodes1(elements1(k,3),2:3))/2;
                nodes2(elements1(k,6),2:3) = (nodes1(elements1(k,4),2:3)+nodes1(elements1(k,3),2:3))/2;
                nodes2(elements1(k,7),2:3) = (nodes1(elements1(k,2),2:3)+nodes1(elements1(k,4),2:3))/2;
            else
                if ~ismember(nodes2(elements1(k,2),1),bdy_node)
                    nodes2(elements1(k,5),2:3) = (nodes1(elements1(k,2),2:3)+nodes1(elements1(k,3),2:3))/2;
                    nodes2(elements1(k,7),2:3) = (nodes1(elements1(k,2),2:3)+nodes1(elements1(k,4),2:3))/2;
                elseif ~ismember(nodes2(elements1(k,3),1),bdy_node)
                    nodes2(elements1(k,5),2:3) = (nodes1(elements1(k,2),2:3)+nodes1(elements1(k,3),2:3))/2;
                    nodes2(elements1(k,6),2:3) = (nodes1(elements1(k,4),2:3)+nodes1(elements1(k,3),2:3))/2;
                else
                    nodes2(elements1(k,6),2:3) = (nodes1(elements1(k,4),2:3)+nodes1(elements1(k,3),2:3))/2;
                    nodes2(elements1(k,7),2:3) = (nodes1(elements1(k,2),2:3)+nodes1(elements1(k,4),2:3))/2;  
                end
            end
        end        
    end
case 'H4'
    % no correction needed, as there are no mid-nodes
    if mesh_correction_type==1
        elements1 = elements1(:,1:5) ;
    else
        elements1 = elements1(:,1:5) ;
        % read boundary data
        bp = arrayfun(@(i)strncmp(q{i},'elset',5), 1:numel(q), 'uniform', 1);
        bs = q{bp};
        bsp = strfind(bs,newline);
        bs = bs(bsp(1)+1:bsp(end)-1);
        bdy_elem = str2num(bs);
        bdy_elem = reshape(bdy_elem,[1,numel(bdy_elem)]);
        bnp = arrayfun(@(i)strncmp(q{i},'nset',4), 1:numel(q), 'uniform', 1);
        bns = q{bnp};
        bnsp = strfind(bns,newline);
        bns = bns(bnsp(1)+1:bnsp(end)-1);
        bdy_node2 = str2num(bns);
        bdy_node2 = reshape(bdy_node2,[1,numel(bdy_node2)]);
        % removing umwanted extra nodes added earlier
        a = 1 ;
        bdy_node = zeros(1,1) ;
        for i = 1:size(bdy_node2,2)
            if bdy_node2(1,i) <= noDofs
               bdy_node(1,a) = bdy_node2(1,i);
               a = a+1 ;
            end
        end 
    end
 case 'H10'
    % all mid nodes of all elements are updated
    if mesh_correction_type==1
        for k = 1:nel
            nodes2(elements1(k,6),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,3),2:4))/2;
            nodes2(elements1(k,7),2:4) = (nodes1(elements1(k,4),2:4)+nodes1(elements1(k,3),2:4))/2;
            nodes2(elements1(k,8),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,4),2:4))/2;
            nodes2(elements1(k,9),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,5),2:4))/2;
            nodes2(elements1(k,10),2:4) = (nodes1(elements1(k,5),2:4)+nodes1(elements1(k,3),2:4))/2;
            nodes2(elements1(k,11),2:4) = (nodes1(elements1(k,5),2:4)+nodes1(elements1(k,4),2:4))/2;
        end
    else
        % read boundary data
        bp = arrayfun(@(i)strncmp(q{i},'elset',5), 1:numel(q), 'uniform', 1);
        bs = q{bp};
        bsp = strfind(bs,newline);
        bs = bs(bsp(1)+1:bsp(end)-1);
        bdy_elem = str2num(bs);
        bdy_elem = reshape(bdy_elem,[1,numel(bdy_elem)]);
        bnp = arrayfun(@(i)strncmp(q{i},'nset',4), 1:numel(q), 'uniform', 1);
        bns = q{bnp};
        bnsp = strfind(bns,newline);
        bns = bns(bnsp(1)+1:bnsp(end)-1);
        bdy_node2 = str2num(bns);
        bdy_node2 = reshape(bdy_node2,[1,numel(bdy_node2)]);

        % removing umwanted extra nodes added earlier
        a = 1 ;
        bdy_node = zeros(1,1) ;
        for i = 1:size(bdy_node2,2)
            if bdy_node2(1,i) <= noDofs
               bdy_node(1,a) = bdy_node2(1,i);
               a = a+1 ;
            end
        end
        % only mid nodes of internal elements are updated
        for k = 1:nel % Change the loop range as needed
            % Check if the current index is in vector bdy_elem
            if ~ismember(k, bdy_elem)
    
                % updated nodes
                nodes2(elements1(k,6),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,3),2:4))/2;
                nodes2(elements1(k,7),2:4) = (nodes1(elements1(k,4),2:4)+nodes1(elements1(k,3),2:4))/2;
                nodes2(elements1(k,8),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,4),2:4))/2;
                nodes2(elements1(k,9),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,5),2:4))/2;
                nodes2(elements1(k,10),2:4) = (nodes1(elements1(k,5),2:4)+nodes1(elements1(k,3),2:4))/2;
                nodes2(elements1(k,11),2:4) = (nodes1(elements1(k,5),2:4)+nodes1(elements1(k,4),2:4))/2;
            else
                if ~ismember(nodes1(elements1(k,2),1),bdy_node)
                    nodes2(elements1(k,6),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,3),2:4))/2;
                    nodes2(elements1(k,8),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,4),2:4))/2;
                    nodes2(elements1(k,9),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,5),2:4))/2;
    
                elseif ~ismember(nodes1(elements1(k,3),1),bdy_node)
                    nodes2(elements1(k,6),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,3),2:4))/2;
                    nodes2(elements1(k,7),2:4) = (nodes1(elements1(k,4),2:4)+nodes1(elements1(k,3),2:4))/2;
                    nodes2(elements1(k,10),2:4) = (nodes1(elements1(k,3),2:4)+nodes1(elements1(k,5),2:4))/2;
                
                elseif ~ismember(nodes1(elements1(k,4),1),bdy_node)
                    nodes2(elements1(k,7),2:4) = (nodes1(elements1(k,3),2:4)+nodes1(elements1(k,4),2:4))/2;
                    nodes2(elements1(k,8),2:4) = (nodes1(elements1(k,2),2:4)+nodes1(elements1(k,4),2:4))/2;
                    nodes2(elements1(k,11),2:4) = (nodes1(elements1(k,4),2:4)+nodes1(elements1(k,5),2:4))/2;
    
                else
                    nodes2(elements1(k,9),2:4) = (nodes1(elements1(k,5),2:4)+nodes1(elements1(k,2),2:4))/2;
                    nodes2(elements1(k,10),2:4) = (nodes1(elements1(k,3),2:4)+nodes1(elements1(k,5),2:4))/2;
                    nodes2(elements1(k,11),2:4) = (nodes1(elements1(k,4),2:4)+nodes1(elements1(k,5),2:4))/2;
    
                end
            end
        end
    end
end

% saving only node coords and element connectivity
% by removing first coloumn containing node/element number
node = nodes2(:,2:end);
element = elements1(:,2:end) ;

end
